<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>隨寫日誌</title><link>https://yun-20459.github.io/</link><description>Recent content on 隨寫日誌</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Erin Li</copyright><lastBuildDate>Wed, 24 Apr 2024 18:24:36 +0000</lastBuildDate><atom:link href="https://yun-20459.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>2023/2024 軟體實習/正職面試心得</title><link>https://yun-20459.github.io/posts/%E5%AF%A6%E7%BF%92%E6%AD%A3%E8%81%B7%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97/</link><pubDate>Wed, 24 Apr 2024 18:24:36 +0000</pubDate><guid>https://yun-20459.github.io/posts/%E5%AF%A6%E7%BF%92%E6%AD%A3%E8%81%B7%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97/</guid><description>由於一些 quant 實習薪水可以跟正職比，所以也有投一些 quant 的實習，這篇文會有 Google、Kronos Research、WorldQuant、Quantrend、Tomofun、Nvidia 的心得。
選公司沒什麼原則，一開始的想法是我愛錢錢，錢錢愛我，後來的想法比較偏向 WLB
quant 類 Kronos Research 這家投的是實習。
D: 官網投遞履歷
D+18: 收到 coding test，有五題 coding 兩小時，我寫出 (3 + 0.5 + 0.5)，題型包含線段樹、dp、greedy、math、bitwise。
D+46: 收到過 coding test 的通知要去團體面試
D+56: 團體面試，超級有趣。分為個人遊戲、團體遊戲、問問題環節。遊戲部份下收。問問題環節可以問很多問題，我感覺自己有多深入了解 quant 產業一點，真的很感謝早上場的面試官(Trader/HR們)，如果有進 Group Interview 真的推推大家不管有沒有其他實習/正職了都來，收穫良多
個人遊戲：每個人手上都有1、2、3 三種牌各三張（總共9張），玩法就是捉對手去裁判桌亮牌，數字大者勝（或者平手、敗），不可棄牌、偷竊搶劫其餘參賽者的牌，最後勝場最多者贏，若時間到手上還有牌者勝場計為零場 團體遊戲：link 問問題環節（節錄一些我還記得的） WQ/Kronos 差在哪：WQ 偏找 Alpha，Kronos 偏找 quant 演算法 Trader 的日常：有興趣的人就會一直工作 or 做相關的交易 演算法跟數學什麼重要：不好說，看 team，有些 team 只需要高中數學但演算法要強，有些 team 需要用到 PDE 等等但是演算法寫的比較簡單 撇除工作型態差異，覺得 Kronos 跟 Google 比的優點是什麼：公司比較小，可以容納/接受比較多創意想法 怎麼知道策略是運氣不好還是策略有誤：會認為運氣不好可能是沒有處理到 edge case -&amp;gt; 修策略 題外話，這次面試的場女生比例直接抽高好多，開心 xD （聽說下午場一個女生都沒有 xD</description></item><item><title>Hackerrank Tower Breaker 題解</title><link>https://yun-20459.github.io/posts/hackerrank-tower-breaker-%E9%A1%8C%E8%A7%A3/</link><pubDate>Sat, 20 Apr 2024 17:26:21 +0800</pubDate><guid>https://yun-20459.github.io/posts/hackerrank-tower-breaker-%E9%A1%8C%E8%A7%A3/</guid><description>真的好不會做這種題喔 QQ
題目
解其實意外的簡單，如果 $m = 1$ 的話那一開始 player 1 就輸了，剩下的情況可以看 $n \mod 2$，因為 player 2 最優的操作就是 player 1 做什麼他就做什麼，所以如果偶數個 tower，那代表最後只剩下高度為 1 的 tower 的時候剛好換到 player 1，所以 player 1 輸，相反的如果有奇數個 tower，那最後只剩下高度為 1 的 tower 的時候換到 player 2，所以 player 2 輸。</description></item><item><title>Resources</title><link>https://yun-20459.github.io/resources/</link><pubDate>Fri, 05 Apr 2024 13:26:51 +0800</pubDate><guid>https://yun-20459.github.io/resources/</guid><description>朋友的連結 &amp;gt; &amp;lt; UJ&amp;rsquo;s blog</description></item><item><title>Test</title><link>https://yun-20459.github.io/posts/test/</link><pubDate>Fri, 05 Apr 2024 11:28:52 +0800</pubDate><guid>https://yun-20459.github.io/posts/test/</guid><description>這是二號標題 1 2 3 4 5 6 7 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int main() { cout &amp;lt;&amp;lt; &amp;#34;Hello world!\n&amp;#34;; } 1 2 3 hexo c hexo g hexo d mathjax
$x + y = z$</description></item><item><title>112-1 修課心得</title><link>https://yun-20459.github.io/posts/112-1-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</link><pubDate>Thu, 04 Apr 2024 16:19:49 +0000</pubDate><guid>https://yun-20459.github.io/posts/112-1-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</guid><description>修的課程 資訊系必修：自動機與形式語言、計算機結構
資訊系選修：三維電腦視覺與深度學習應用
自動機與形式語言 開課教授：林忠緯
涼度：2/5
甜度：4/5
我去年修另一個班，上課都聽得懂結果考試完全不會寫，今年就換成忠緯試試看。這科感覺真的要大量刷題才會比較有感覺，不然我覺得上課老師教的都還算清楚，應該不太會有聽不懂的問題，問題應該都會是出在題目不會寫。我覺得沒有很涼，但可能是因為我數學沒有很好，甜度的話因為有調一點分所以給 4 分 &amp;gt; &amp;lt;
計算機結構 開課教授：楊佳玲
涼度：1/5
甜度：5/5
一樣去年今年都修的課，我就爛。我覺得做考古題是沒有用的，有真的去讀一些額外的東西可能比較有用。涼度的話每週都有討論課，討論題目＋小考，要實體出席有點麻煩，然後是翻轉教學，回家要先聽，上課還是 3 小時。甜度的話因為老師把我調了應該不少分所以給滿分。
三維電腦視覺與深度學習應用 開課教授：陳祝嵩
涼度：1/5
甜度：3/5
簡稱 3DCV，對於想了解 2D -&amp;gt; 3D 的 CV 的人推推，講解很詳細，作業也有一些挑戰性，同時也可以學到很多東西，期中考超級難，分數因為沒有調分所以給 3 分 &amp;gt; &amp;lt;
感想區 一直忘記發 :p</description></item><item><title>浮點數二分搜技巧</title><link>https://yun-20459.github.io/posts/%E6%B5%AE%E9%BB%9E%E6%95%B8%E4%BA%8C%E5%88%86%E6%90%9C%E6%8A%80%E5%B7%A7/</link><pubDate>Mon, 04 Sep 2023 21:49:45 +0000</pubDate><guid>https://yun-20459.github.io/posts/%E6%B5%AE%E9%BB%9E%E6%95%B8%E4%BA%8C%E5%88%86%E6%90%9C%E6%8A%80%E5%B7%A7/</guid><description>今天寫了這題才知道原來浮點數二分搜要這樣寫。
原本我以為應該是要根據他想要的浮點數誤誤差當作 eps，然後寫成這樣
1 2 3 while (r - l &amp;gt; eps) { do binary search } 但那樣的話會 TLE，因為 r - l 的精度誤差有可能導致這個 while 會變成一個無窮迴圈，就是其實他已經達到 eps 了但是減起來大於。
所以應該要根據你的範圍跟他要的浮點數誤差來估計要砍半幾次，砍一次的精度是 0.5，所以砍 10 次的話大概會是 1e-3，所以根據你要的範圍 / 浮點數誤差 / 3 * 10 大概就是你要砍半的次數。
順便附上這題我的 code，我覺得想法不難只是需要知道浮點數二分搜怎麼寫而已。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 #include &amp;lt;bits/stdc++.</description></item><item><title>Atcoder Beginner Contest 315 題解</title><link>https://yun-20459.github.io/posts/atcoder-beginner-contest-315-%E9%A1%8C%E8%A7%A3/</link><pubDate>Sun, 20 Aug 2023 21:42:01 +0000</pubDate><guid>https://yun-20459.github.io/posts/atcoder-beginner-contest-315-%E9%A1%8C%E8%A7%A3/</guid><description>A - tcdr 直接跳過 aeiou 輸出就好
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; typedef pair&amp;lt;int, int&amp;gt; pii; typedef pair&amp;lt;ll, ll&amp;gt; pll; #define SZ(a) (int)(a).size() #define ALL(v) (v).begin(), (v).end() #define X first #define Y second #define dbg(x) cerr &amp;lt;&amp;lt; #x &amp;lt;&amp;lt; &amp;#34; = &amp;#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; void solve() { string s; cin &amp;gt;&amp;gt; s; for (int i = 0; s[i]; i++) { if (s[i] == &amp;#39;a&amp;#39; || s[i] == &amp;#39;e&amp;#39; || s[i] == &amp;#39;i&amp;#39; || s[i] == &amp;#39;o&amp;#39; || s[i] == &amp;#39;u&amp;#39;) continue; else cout &amp;lt;&amp;lt; s[i]; } cout &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; } /* CheckList: 1.</description></item><item><title>Atcoder Beginner Contest 312 題解</title><link>https://yun-20459.github.io/posts/atcoder-beginner-contest-312-%E9%A1%8C%E8%A7%A3/</link><pubDate>Thu, 17 Aug 2023 21:57:46 +0000</pubDate><guid>https://yun-20459.github.io/posts/atcoder-beginner-contest-312-%E9%A1%8C%E8%A7%A3/</guid><description>A - Chord 判斷一下就好了。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; typedef pair&amp;lt;int, int&amp;gt; pii; typedef pair&amp;lt;ll, ll&amp;gt; pll; #define SZ(a) (int)(a).size() #define ALL(v) (v).begin(), (v).end() #define X first #define Y second #define dbg(x) cerr &amp;lt;&amp;lt; #x &amp;lt;&amp;lt; &amp;#34; = &amp;#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; string ss[7] = {&amp;#34;ACE&amp;#34;, &amp;#34;BDF&amp;#34;, &amp;#34;CEG&amp;#34;, &amp;#34;DFA&amp;#34;, &amp;#34;EGB&amp;#34;, &amp;#34;FAC&amp;#34;, &amp;#34;GBD&amp;#34;}; void solve() { string s; cin &amp;gt;&amp;gt; s; for (int i = 0; i &amp;lt; 7; i++) { if (s == ss[i]) { cout &amp;lt;&amp;lt; &amp;#34;Yes\n&amp;#34;; return; } } cout &amp;lt;&amp;lt; &amp;#34;No\n&amp;#34;; } /* CheckList: 1.</description></item><item><title>Atcoder Beginner Contest 313 題解</title><link>https://yun-20459.github.io/posts/atcoder-beginner-contest-313-%E9%A1%8C%E8%A7%A3/</link><pubDate>Wed, 16 Aug 2023 19:59:22 +0000</pubDate><guid>https://yun-20459.github.io/posts/atcoder-beginner-contest-313-%E9%A1%8C%E8%A7%A3/</guid><description>A - To be Saikyo 直接找最大的是多少就好，注意要特判一下如果第一個就是最大的且沒有人跟他一樣大就不用加，不然還是要 +1。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; typedef pair&amp;lt;int, int&amp;gt; pii; typedef pair&amp;lt;ll, ll&amp;gt; pll; #define SZ(a) (int)(a).size() #define ALL(v) (v).begin(), (v).end() #define X first #define Y second #define pb emplace_back #define dbg(x) cout &amp;lt;&amp;lt; (#x &amp;#34; = &amp;#34;) &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; void solve() { int n; cin &amp;gt;&amp;gt; n; vector&amp;lt;int&amp;gt; p(n); for (int &amp;amp;x : p) cin &amp;gt;&amp;gt; x; int mx = *max_element(ALL(p)); if (mx == p[0]) { for (int i = 1; i &amp;lt; n; i++) { if (p[i] == mx) { cout &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; return; } } cout &amp;lt;&amp;lt; &amp;#34;0\n&amp;#34;; } else cout &amp;lt;&amp;lt; mx + 1 - p[0] &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; } int main() { ios::sync_with_stdio(0);cin.</description></item><item><title>Atcoder Beginner Contest 314 題解</title><link>https://yun-20459.github.io/posts/atcoder-beginner-contest-314-%E9%A1%8C%E8%A7%A3/</link><pubDate>Mon, 14 Aug 2023 21:36:48 +0000</pubDate><guid>https://yun-20459.github.io/posts/atcoder-beginner-contest-314-%E9%A1%8C%E8%A7%A3/</guid><description>A - 3.14 直接複製一下題目然後輸出就好了
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; typedef pair&amp;lt;int, int&amp;gt; pii; typedef pair&amp;lt;ll, ll&amp;gt; pll; #define SZ(a) (int)(a).size() #define ALL(v) (v).begin(), (v).end() #define X first #define Y second #define dbg(x) cerr &amp;lt;&amp;lt; #x &amp;lt;&amp;lt; &amp;#34; = &amp;#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; string pi = &amp;#34;3.</description></item><item><title>二分搜技巧</title><link>https://yun-20459.github.io/posts/%E4%BA%8C%E5%88%86%E6%90%9C%E6%8A%80%E5%B7%A7/</link><pubDate>Sun, 06 Aug 2023 19:38:47 +0000</pubDate><guid>https://yun-20459.github.io/posts/%E4%BA%8C%E5%88%86%E6%90%9C%E6%8A%80%E5%B7%A7/</guid><description>上次團練的時候被學長建議了這種寫法，所以記錄一下。以往我都是寫
1 2 3 4 5 while (l &amp;lt; r) { int m = (l + r) &amp;gt;&amp;gt; 1; if (chk(m)) r = m; else l = m + 1; } 但有時候就會搞不清楚自己到底想要取什麼 = =，有點笨，所以換成下面的寫法
1 2 3 4 5 while (r - l &amp;gt; 1) { int m = (l + r) &amp;gt;&amp;gt; 1; if (chk(m)) l = m; else r = m; } 這樣的寫法可以解釋成，如果 check mid 是對的，那麼我就提升左界，找到符合資格最大的，不然就下壓右界，然後因為停止條件是 $r - l == 1$，所以到時候 $l$ 就是合法的最大界，$r$ 會是不合法的最小界。</description></item><item><title>111-2 修課心得</title><link>https://yun-20459.github.io/posts/111-2-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</link><pubDate>Wed, 12 Jul 2023 23:09:37 +0000</pubDate><guid>https://yun-20459.github.io/posts/111-2-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</guid><description>修的課程 資訊系必修：人工智慧導論、計算機網路實驗
資訊系選修：數位視覺效果、巨量資料系統之應用
通識：森林醫學點線面
人工智慧導論 開課教授：陳尚澤、陳縕儂
涼度：4.5/5 (扣在期末 project 上)
甜度：5/5
前半學期是 UC Berkeley 的 CS188，後半學期是軒田 ML style + 縕儂擅長的 DL。整體來說作業都可以做得很快，應該三個小時可以做完，期中考的話可以多做 CS188 的考古題，今年的幾乎全部都是從這裡出的，沒有期末考只有機率大賽的期末 project 德州撲克AI，助教會給閹割版的 pypokerengine 然後說我們不能抄= = ?，真的會氣死，不過也有可能是我很爛，還是有同學拿到滿分，真的很厲害
計算機網路實驗 開課教授：張傑帆
涼度：4/5
甜度：5/5
基本上跟隔壁班上課內容是一模一樣的，不過不知道期末 project 規範一不一樣。這班的投影片錯誤百出，不可能按照投影片做出來，需要自己花時間 google。報告評分標準是把所有組別排名之後給分，所以就算你寫的不錯只要大家寫的比你好就下去。期末 project 教授跟我們這組說要有網站 + ML，結果最後成果只有我們這組有 ML :D 總之我覺得會修到蠻生氣的，脾氣不好的人不要修這一班，但是教授會調很多分啦。
數位視覺效果 開課教授：莊永裕
涼度：2/5
甜度：4/5
做多少事拿多少分，不過要做的事蠻多的，第一個作業主要會是在實作論文的演算法，第二個的話會是寫抓取 feature 的演算法上比較困難，想要多拿分數的就要多實作這樣，每一個作業也都有投票，前五名有加分（賺，謝謝我的攝影大腿隊友），要注意的是助教送出去的不是最後成績，老師會再自己評分 Final project + 調分（有可能是往下調&amp;hellip;）不過整體而言推這門課，學到蠻多基礎知識的。
巨量資料系統之應用 開課教授：廖世偉
涼度：5/5
甜度：5/5
傳說中阿公的朋友的兒子的課(X)，主要就是玩 GPT 跟聽演講(?)，期中期末開書考所以看一下就好，Final Project 比較有趣可以多分析 GPT-3.5 跟 GPT-4 的差別
森林醫學點線面 開課教授：蘇大成</description></item><item><title>nginx &amp; certbot 紀錄</title><link>https://yun-20459.github.io/posts/nginx-certbot-%E7%B4%80%E9%8C%84/</link><pubDate>Thu, 25 May 2023 14:11:22 +0000</pubDate><guid>https://yun-20459.github.io/posts/nginx-certbot-%E7%B4%80%E9%8C%84/</guid><description>之前在 appworks 的時候直接用了朋友推薦的這個 docker image，直接把 nginx 跟 certbot 打包好給你，只要寫少少的 .conf 就可以了。不過這次在寫 CNL 的期末專案的時候，組員寫的 html 會掛在外面，要弄成 docker 有點麻煩（其實就是我懶得請人家弄），所以就直接在 EC2 上面弄 nginx + certbot 了，記錄一下免得之後忘記。
環境：AWS EC2 instance(Ubuntu 22.04)
安裝 nginx 1 2 3 sudo apt update sudo wget http://nginx.org/keys/nginx_signing.key sudo apt-key add nginx_signing.key 1 2 3 sudo apt update sudo apt install nginx sudo systemctl start nginx.service 到這裡就已經開好 nginx 服務了，可以用
1 sudo systemctl status nginx.service 確認有沒有在跑
安裝 certbot 1 2 sudo apt-get update -y sudo apt-get install certbot python3-certbot-nginx -y 申請憑證</description></item><item><title>111-1 修課心得</title><link>https://yun-20459.github.io/posts/111-1-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</link><pubDate>Thu, 16 Feb 2023 20:02:41 +0000</pubDate><guid>https://yun-20459.github.io/posts/111-1-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</guid><description>修的課程 資訊系必修：系統程式設計、專題研究、計算機網路
資訊系選修：數位聲音藝術與創作
通識：海洋科學概論
系統程式設計 開課教授：鄭卜壬
涼度：5/5
甜度：3/5
靠著前人的筆記活下來了 &amp;gt;&amp;lt; 主要還是程式作業太雷了，該測的 case 都沒有測好，不然應該算甜（？）這門課主要是要跟上老師的速度蠻困難的，雖然恢復實體之後老師的笑話也變多了，整個上課步調變得輕鬆一點點，只是 16 周要上完 18 周的進度導致變出了很多影片要我們自己看 QQ 建議上課的時候可以錄個音或者像我們這屆有去年的影片可以看，多聽幾遍，魔鬼都在細節中，考試一定考
專題研究 開課教授：陳彥仰
涼度：4/5
甜度：2/5
就是加 lab，我跟到的 project 剛好發了一篇論文就蹭到了第 n 作 &amp;gt;&amp;lt; 人機互動真的不錯玩，雖然 VR 真的好暈好暈，甜度的部分給 2 是因為我覺得我在暑假做了蠻多事的（因為開學就要投論文，所以暑假比較忙，所以涼度給 4 分主要是開學比較沒那麼忙）結果成績慘慘 &amp;gt;&amp;lt;
計算機網路 開課教授：周承復
涼度：5/5
甜度：5/5
隨便查評價都知道有多甜涼（？）憑心而論老師上的不錯，期末的 project 也很好玩，可以學到很多酷東西，作業的話網路上都有解答不過還是建議自己想一次，畢竟考試就幾乎一樣的東西，然後老師都會給去年的考古題 + 答案，有夠佛心 &amp;gt;&amp;lt;（雖然不會考w
數位聲音藝術與創作 開課教授：林經堯
涼度：3/5
甜度：3/5
有趣的課程，在 ptt 上看到評價就決定選了，開學老師就有說他等第就是靠感覺給，所以甜度給 3 顆 &amp;gt;&amp;lt; （老師有說會在 A 字頭）教 pure data 跟 p5.js，對生成藝術 + 音樂有興趣的應該會覺得很好玩，偷偷抱怨一下助教很雷所以上課有時候品質不是很好 QQ 但整體來說整學期收穫超級多，有學到很多酷東西，雖然我們的作品不能作成 NFT 有點小可惜，不過真心好玩 &amp;gt;&amp;lt; （我甚至用 p5.</description></item><item><title>Codeforces 1635D. Infinite Set</title><link>https://yun-20459.github.io/posts/codeforces-1635d-infinite-set/</link><pubDate>Mon, 24 Oct 2022 21:57:08 +0000</pubDate><guid>https://yun-20459.github.io/posts/codeforces-1635d-infinite-set/</guid><description>這題好難，我看了好多遍別人的題解才懂 QwQ
題目 給一個陣列，考慮一個無限的集合 $S$ 由符合以下條件之一的 $x$ 構成
$x = a[i]$ $x = 2 * y + 1$ and $y \in S$ $x = 4 * y$ and $y \in S$ 問在集合 $S$ 中有多少元素小於 $2^p$，答案很大要 mod $1e9+7$
作法 因為 $p$ 的範圍會到 2e5，所以要用二進制來想這題。
對於一個二進位制為 $t$ 的數字，可以想像操作二就是左移一位然後末位補 1，操作二就是左移兩位（這邊就有點像 string）。所以可以觀察出一個結論，就是對於一個數字，把它增加 $i$ 位的方法有 $dp_i$ 種，這裡的 $dp$ 就是費波那契數列。
那這跟答案有什麼關係呢，假設一個二進位制為 $t$ 的數字存在在 $a$ 之中，那麼他擴展出的數字要小於 $p$ 的話，他擴展出的數字的數量就會是 $\sum_{i = 0}^{p - t} dp_i$，也就是不擴展、擴展一位、擴展兩位&amp;hellip;，那這件事情可以透過在算費波那契數列的時候算前綴和得到。
接下來考慮是不是每個 $a[i]$ 都會對答案有貢獻，其實不是這樣，因為 $S$ 是一個 set，不會有重複的數字出現，所以如果會重複出現就不用算。那題解的做法是說那就把會產生的數字想成一棵樹，我一直去看產生 $x$ 的 parent 有沒有已經被 create 過，如果有的話，那就代表 $x$ 已經被前面的數字（也就是 parent） create 過了，那就不能算進答案裡面（因為已經算過了），在這邊的話 parent 的意思就是說看他能不能逆推操作二或操作三。</description></item><item><title>Stoer Wagner Min Cut 演算法</title><link>https://yun-20459.github.io/posts/stoer-wagner-min-cut-%E6%BC%94%E7%AE%97%E6%B3%95/</link><pubDate>Fri, 07 Oct 2022 22:24:23 +0000</pubDate><guid>https://yun-20459.github.io/posts/stoer-wagner-min-cut-%E6%BC%94%E7%AE%97%E6%B3%95/</guid><description>定義 給一個無向連通圖，去掉一個邊集合之後可以使得圖變成兩個連通分量，這個邊集合就叫做割集。
最小割的意思就是找到一個權重和最小的割集。
Stoer Wagner 演算法 我不會證明，所以直接講求最小割的演算法。（ps. 如果有人會的話可以教我 &amp;gt;&amp;lt;）
1 2 3 4 5 全局最小值為 INT_MAX 做 n - 1 次「合併」下面的 3 點直到整個圖變成整個連通 1. 固定點 s 用 prim 做最大生成樹，並記錄最後擴展的兩個點（也可以想成是最後的點+最後的邊） 2. 如果跟最後擴展的點連接的所有邊權和 &amp;lt; 全局最小值就更新 3. 合併最後擴展的那兩個頂點為一個點（我的做法是直接合併邊） 模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 struct SW_Min_Cut { static const int maxn = 500 + 5; int edge[maxn][maxn]; int n; int vis[maxn], del[maxn], weight[maxn]; void Init(int _n) { memset(edge, 0, sizeof(edge)); memset(del, 0, sizeof(del)); n = _n; } void AddEdge(int u, int v, int w) { edge[u][v] += w; edge[v][u] += w; } void Search(int &amp;amp;s, int &amp;amp;t) { memset(vis, 0, sizeof(vis)); memset(weight, 0, sizeof(weight)); s = t = -1; while (true) { int mx = -1, cur = 0; for (int i = 0; i &amp;lt; n; i++) { if (!</description></item><item><title>NEOJ 513 超大螢幕設置</title><link>https://yun-20459.github.io/posts/neoj-513-%E8%B6%85%E5%A4%A7%E8%9E%A2%E5%B9%95%E8%A8%AD%E7%BD%AE/</link><pubDate>Tue, 04 Oct 2022 15:20:17 +0000</pubDate><guid>https://yun-20459.github.io/posts/neoj-513-%E8%B6%85%E5%A4%A7%E8%9E%A2%E5%B9%95%E8%A8%AD%E7%BD%AE/</guid><description>題目 link
作法 是單調隊列的經典題目，只是這題變成要往左往右看，看到第一個比它小的就停止，這樣就會知道以它的高度設置螢幕的話最寬能夠到多少。這邊用 vector 實作 stack 比較好寫（我看了別人的 code 覺得好棒），只是我不太習慣它 stack 的寫法，所以把 stack 存的值改成 {value, id} 這樣。
然後記得要開 long long ，我 WA 了好多次 QQ
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include &amp;lt;bits/stdc++.</description></item><item><title>CSES Josephus Queries</title><link>https://yun-20459.github.io/posts/cses-josephus-queries/</link><pubDate>Mon, 03 Oct 2022 22:39:07 +0000</pubDate><guid>https://yun-20459.github.io/posts/cses-josephus-queries/</guid><description>題目 給 $n$ 個圍成一圈的小孩，每 2 個人就移掉 2 個人中的第二個，問第 $k$ 個小孩被移掉的編號
作法 這題網路上有很多題解，我看的懂 tutorial 但實作都看不懂所以寫一下。 ps 是我隊友教我的她好棒
因為圍成一圈，所以說我們可以把要移掉的數目看成是 $\frac{n + 1}{2}$，這樣一來如果 $n$ 是奇數，被移掉的就會是所有的偶數跟 1，反之則是移掉所有的偶數。
那麼遞迴下去做的話，可以看成是把該移掉的人移掉之後重新編號成 1, 2, 3, &amp;hellip;，再把 index remap 回來，所以這時候就要看原本是奇數還是偶數來決定怎麼 remap。
舉例來說，如果 $n$ 是奇數，那第一輪拿完會變成 3, 5, 7, &amp;hellip;, n，這樣重新編號成 1, 2, 3, &amp;hellip;，就要 $2 \times \text{id} + 1$ remap 回來。如果 $n$ 是偶數的話，那第一輪拿完會變成 1, 3, 5, 7, &amp;hellip;, n，這樣重新編號成 1, 2, 3, &amp;hellip;，就要 $2 \times \text{id} - 1$ remap 回來。</description></item><item><title>CSES Tree Matching</title><link>https://yun-20459.github.io/posts/cses-tree-matching/</link><pubDate>Mon, 19 Sep 2022 21:51:48 +0000</pubDate><guid>https://yun-20459.github.io/posts/cses-tree-matching/</guid><description>第一次接觸樹 dp OuO
題目 給一棵樹，找到最大的邊集合使得任兩邊不共享一個點，輸出集合大小。
作法 定義 如果是 array 版本的話（i.e. 給一個序列不能選相鄰的，最大化價值），比較容易可以想到轉移式 $dp(i) = max(v_i + dp(i - 2), dp(i - 1))$
轉成樹的版本的話，就需要在樹上面做 dp，對於一個節點 $u$ 有下面兩種情況
取一條跟 $v \in child(u)$ 有連接的邊，答案定義為 $dp_0(u)$ 不取任何跟 $v \in child(u)$ 有連接的邊，答案定義為 $dp_1(u)$ 為什麼沒有取兩條以上的 case 呢？因為如果取兩條以上的話 $u$ 就會變成那個共享的點。
所以從上面的定義可以知道答案是 $max(dp_0(1), dp_1(1))$
轉移式 $dp_1(u)$
因為不取任何跟 $v \in child(u)$ 有連接的邊，所以不管「跟 $v$ 的小孩有連接的邊」取不取都可以，所以答案就是
$dp_1(u) = \sum_{v \in child(u)} max(dp_0(v), dp_1(v))$
$dp_0(u)$
可以先處理取一條的部分，因為取了 $u \rightarrow v$ 這一條，所以「不取任何跟 $w \in child(v)$ 有連接的邊」是 $dp_1(v)$，再加上 $u \rightarrow v$ 這一條，就是 $dp_1(v) + 1$。</description></item><item><title>CSES List Removals</title><link>https://yun-20459.github.io/posts/cses-list-removals/</link><pubDate>Sun, 18 Sep 2022 19:18:46 +0000</pubDate><guid>https://yun-20459.github.io/posts/cses-list-removals/</guid><description>題目 給定一個長度為 $n$ 的序列 $a$，給 $n$ 個詢問，對於每個詢問 $pos$，輸出位置為 $pos$ 的值並從序列中刪除。
作法 這題的技巧要用到「BIT 上二分搜」，可以想像如果一個數字還沒有被刪除，我們就將它的 presentation 記為 $1$，反之則為 $0$，那麼查詢位置在 $pos$ 的元素等於就是查找前綴和為 $pos$，且 presentation = 1 的位置。
至於二分搜要怎麼實作呢，BIT 的節點是根據 2 的冪次劃分的，所以每次可以嘗試擴展 2 的冪次，看現在的前綴和是不是小於詢問，如果是的話代表可以擴展。等於說我們在找 $\sum_{i = 1}^x presentation[i] &amp;lt; pos$ 的 $x$，如果現在的和還比詢問小的話就可以擴展。所以一路這樣擴展下去之後，我們會找到最大的 $x$ 符合上式，那麼 $x + 1$ 就是答案。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #include &amp;lt;bits/stdc++.</description></item><item><title>CSES Hotel Queries</title><link>https://yun-20459.github.io/posts/cses-hotel-queries/</link><pubDate>Sat, 17 Sep 2022 23:13:51 +0000</pubDate><guid>https://yun-20459.github.io/posts/cses-hotel-queries/</guid><description>題目 給一個序列 $a$，對於每個詢問 $x$ 找到最小的 $i$ 使得 $a[i] &amp;gt;= x$，並將 $a[i] -= x$。
作法 這題要用到的技巧是線段樹二分搜。
線段樹的每個節點可以存「節點包含的區間內最大的數」，所以對於每個詢問 $x$，我都可以去看是下面哪個 case
左子樹的最大值 $&amp;gt;= x$ -&amp;gt; 往左子樹遞迴查詢 右子樹的最大值 $&amp;gt;= x$ -&amp;gt; 往右子樹遞迴查詢 都小於 -&amp;gt; 答案 $= 0$ 實作就看 code
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include &amp;lt;bits/stdc++.</description></item><item><title>Sparse Table</title><link>https://yun-20459.github.io/posts/sparse-table/</link><pubDate>Sun, 04 Sep 2022 22:13:25 +0000</pubDate><guid>https://yun-20459.github.io/posts/sparse-table/</guid><description>能幹嘛 區間最小/最大查詢，利用可以把區間拆成 $\log_2(\text{區間長度})$ 個長度為 2 的冪次的區間，達到 $O(N\log(N))$ pre-build, $O(1)$ 查詢。
（區間和查詢也可以，不過是 $O(\log(N))$，而且可以用前綴和 $O(1)$）
舉例來說，$[2, 10]$ 是一個長度為 9 的區間，那他就可以被拆成 $[2, 9] \cup [10, 10]$，如果我可以提前知道這兩個區間的答案，那我就知道組合起來的答案。
建 st 表的話可以看下面例題的 code， $st[i][j] :=$ 從 $i$ 開始長度為 $2^j$ 的區間的答案，那因為這樣的區間可以再拆成兩個長度為 $2^{j - 1}$ 的區間，所以可以用這兩個區間求答案。
btw 缺點是如果陣列值有改動的話就要重蓋 st 表，所以適用於不會改值的時候用。
例題 CSES-Static Range Minimum Queries
作法
就是 sparse table 模板題，不過這題的話不用跟求 sum 一樣拆成好幾個不重疊的區間，因為求 min 的話就算拆成兩個重疊的也沒關係，所以就暴力拆成兩個 $\log(r - l + 1)$ 長度的區間就可以查詢了。
code
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 #include &amp;lt;bits/stdc++.</description></item><item><title>Atcoder DP contest (持續更新中)</title><link>https://yun-20459.github.io/posts/atcoder-dp-contest/</link><pubDate>Sun, 28 Aug 2022 19:12:56 +0000</pubDate><guid>https://yun-20459.github.io/posts/atcoder-dp-contest/</guid><description>紀錄一下自己練習 dp 的過程，最近在寫 icpc 培訓班的作業感受到自己的 dp 實在是太爛了&amp;hellip; 剛好被推薦有這個題單可以練習，所以就順便把自己不會的東西整理一下變成一篇文，希望可以加深一點印象w
btw 如果是我本來就會的東西就不會寫解釋純貼 code。
題單
A. Frog 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 const int maxn = 1e5 + 5; int h[maxn], dp[maxn]; void solve() { int n; cin &amp;gt;&amp;gt; n; for (int i = 1; i &amp;lt;= n; i++) cin &amp;gt;&amp;gt; h[i]; dp[1] = 0, dp[2] = abs(h[2] - h[1]); for (int i = 3; i &amp;lt;= n; i++) { dp[i] = min(dp[i - 1] + abs(h[i] - h[i - 1]), dp[i - 2] + abs(h[i] - h[i - 2])); } cout &amp;lt;&amp;lt; dp[n] &amp;lt;&amp;lt; endl; } B.</description></item><item><title>2022 IONC</title><link>https://yun-20459.github.io/posts/2022-ionc/</link><pubDate>Wed, 27 Jul 2022 14:35:20 +0000</pubDate><guid>https://yun-20459.github.io/posts/2022-ionc/</guid><description>大學生混進高中競程營隊裝年輕（Ｘ
一開始來的時候目標是想要練刷題，結果剛好被朋友推坑去 icpc 培訓班 hw0.514，所以就希望這次營隊能多學一點，看對 hw0.514 有沒有幫助（對 icpc 有沒有幫助不好說，都還不知道自己能不能寫到錄取門檻 QQ）
打一點上課比賽心得，順便紀錄不會的東西方便以後回來補坑
Day 1 基本技巧 + 基礎資料結構
基本技巧不知道的有離散化、lambda、三分搜，基礎資結大部分東西 dsa 都上過，不知道（or 不太熟）的有線段樹、BIT、Sparse Table
今天沒有比賽
Day 2 進階資料結構、基礎 dp
進階資料結構線段樹好難 QQ，套其他資結更難，我什麼都不會 QQ。 基礎 dp 例題都會之後就看經典問題能不能自己推出轉移ㄅ
今天的團賽是團體賽，隊伍拿 407 我拿 400，好開心w
不過我還是只會解水題 Q，甚至有一題官解兩個做法我都有想到，但就是寫不出來，哭了
Day 3 進階 dp、基礎圖論（、計算幾何）
進階 dp 一開始的優化還好，線段樹優化、單調隊列優化、斜率優化還要再多練練了，連講師上課講解有些小部分都不是很懂 QQ，基礎圖論 ada 幾乎都上過，不過 拓樸排序 跟 判二分圖沒自己寫過。
計算幾何不在日程表上，但因為斜率優化跟凸包有關所以講師們多補了電子檔給我們讚讚 &amp;gt;&amp;lt; 要找時間補起來ㄌ
比賽燒雞燒好燒滿，拿了兩題後就不會做事了 Q 少拿 A 96 分的區間 dp，E 的最短路徑樹，都有點想法但沒時間做出來可惜
Day 4 進階圖論 slide、數論
圖論也是大部分 ada 教過，不過我樹序列化跟樹鏈剖分死掉了，要找時間補（HLD 看起來是實作地獄）</description></item><item><title>TIOJ 1882. pC. 最暖的冬天</title><link>https://yun-20459.github.io/posts/tioj-1882-pc-%E6%9C%80%E6%9A%96%E7%9A%84%E5%86%AC%E5%A4%A9/</link><pubDate>Sat, 23 Jul 2022 21:26:51 +0000</pubDate><guid>https://yun-20459.github.io/posts/tioj-1882-pc-%E6%9C%80%E6%9A%96%E7%9A%84%E5%86%AC%E5%A4%A9/</guid><description>題目 link
作法 純純的三分搜，只是我一開始沒看懂題目就開始亂寫，然後又在「求出 $L(x)$ 這部分卡住」，後來學長開導（？）我之後才知道其實就是在三分搜的時候原本是問一個函數，現在他要的是所有函數集合的最小值，那就 $O(n)$ 問過去就好了。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 #include &amp;lt;bits/stdc++.</description></item><item><title>Codeforces 986B. Petr and Permutations</title><link>https://yun-20459.github.io/posts/codeforces-986b-petr-and-permutations/</link><pubDate>Fri, 22 Jul 2022 13:54:14 +0000</pubDate><guid>https://yun-20459.github.io/posts/codeforces-986b-petr-and-permutations/</guid><description>題目 有一個陣列 ${1, 2, &amp;hellip;, N}, (N \leq 10^6)$，Petr 喜歡對序列執行 $3n$ 次任取兩個數字交換的操作，Um_nik 喜歡做 $7n + 1$ 次，給定一個操作後的陣列，求是誰操作的。
作法 把 index 跟陣列數值想成是圖中有連接的點的話，一開始未操作的陣列會有 $n$ 個自環，每一次操作會增加或減少一個環，由 $3n$ 跟 $7n + 1$ 的奇偶性不同可以判斷是誰操作的。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include &amp;lt;bits/stdc++.</description></item><item><title>Leetcode 792. Number of Matching Subsequences</title><link>https://yun-20459.github.io/posts/leetcode-792-number-of-matching-subsequences/</link><pubDate>Wed, 20 Jul 2022 14:07:36 +0000</pubDate><guid>https://yun-20459.github.io/posts/leetcode-792-number-of-matching-subsequences/</guid><description>試著記得每次都要寫複雜度（？
題目 link
作法 一開始看到 tag 以為真的要寫 trie，後來才發現不用（用 trie 我也不會寫），用二分搜就可以了。
概念是先去紀錄 s 每個字母有出現在哪裡，然後去遍歷每個 word，對於 word 裡的每一個字母，我都要能在 s 裡面找到比前一個字母在 s 裡面的位置更後面的位置（好拗口），這樣才符合 subsequence of string。
舉例來說
1 2 s = &amp;#34;abcd&amp;#34; words = [&amp;#34;ab&amp;#34;, &amp;#34;cb&amp;#34;] 顯然對於 &amp;quot;ab&amp;quot; 來說，我可以在 s 裡面找到 1 跟 2 這兩個位置，所以他是對的，但對於 &amp;quot;cb&amp;quot; 來說，c 的第一個位置就是 3 了，而 3 後面沒有 b 所以他是錯的。
假設 s 長度是 $L$，$words$ 陣列長度是 $N$，每個 word 長度是 $l$，複雜度會是 $O(LNlog(l))$。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public: int numMatchingSubseq(string s, vector&amp;lt;string&amp;gt;&amp;amp; words) { vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; ch(26); int n = s.</description></item><item><title>Leetcode 629. K Inverse Pairs Array</title><link>https://yun-20459.github.io/posts/leetcode-629-k-inverse-pairs-array/</link><pubDate>Sun, 17 Jul 2022 21:27:49 +0000</pubDate><guid>https://yun-20459.github.io/posts/leetcode-629-k-inverse-pairs-array/</guid><description>題目 link
作法 $O(nk^2)$ 我以為會 TLE 然後剛剛測發現其實不會 QQ，可以定義 $dp[i][j]$ 是使用 1 ~ $i$ 的數字後，可以構成 $j$ 個 inversion pair 的數量，那答案就會是 $dp[n][k]$。
轉移式的話可以觀察，如果我現在已經放好 1~3 然後我要把 4 放進去這個序列裡面，我可以有下面這幾種放法
放法 造成的逆序數對 4xxx 3 x4xx 2 xx4x 1 xxx4 0 所以就可以發現這樣的轉移式
$dp[i][j] = dp[i - 1][j - k]$, $\forall k \in [0, i - 1]$
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public: int kInversePairs(int n, int k) { const int mod = 1e9 + 7; vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; dp(n + 1, vector&amp;lt;int&amp;gt;(k + 1, 1)); for (int i = 1; i &amp;lt;= n; i++) { for (int j = 0; j &amp;lt;= k; j++) { for (int k = 0; k &amp;lt;= min(K, N - 1); k++) { dp[i][j] = (dp[i][j] + dp[i - 1][j - k]) % mod; } } } return dp[n][k]; } }; $O(nk)$ 同樣的概念，只是剛剛的轉移式可以再優化</description></item><item><title>Leetcode 2305. Fair Distribution of Cookies</title><link>https://yun-20459.github.io/posts/leetcode-2305-fair-distribution-of-cookies/</link><pubDate>Thu, 14 Jul 2022 17:07:07 +0000</pubDate><guid>https://yun-20459.github.io/posts/leetcode-2305-fair-distribution-of-cookies/</guid><description>題目 link
作法 bit manipulation + dp 這題跟 這題 蠻像的，不過這次是要盡可能平均分然後輸出這樣分以後一個小孩最多可能拿到的餅乾數。
我一開始想跟 698 那題一樣做，不過這樣的話是沒辦法知道 max 的，因為只能用袋子分而不是直接拿餅乾分，所以要換一個方法。
定義 dp[i][mask] 為當人數有 $i$ 個的時候取的 subset 為 $mask$ 時，拿到最多餅乾的小孩的餅乾數量的最小值，就會有以下的轉移式
dp[i][mask] = min(dp[i][mask], max(dp[i - 1][mask ^ submask], sum[submask]))
意思是說在這群小孩裡面有個小孩拿了 submask 這樣的 subset，剩下的小孩拿其他的，看最大值會是多少，然後因為我最後要的是最小化最大值，所以取 min。
關於 enumerating submask of mask 可以看 這篇 講解
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution { public: int distributeCookies(vector&amp;lt;int&amp;gt;&amp;amp; cookies, int k) { int n = cookies.</description></item><item><title>Leetcode 698. Partition to K Equal Sum Subsets</title><link>https://yun-20459.github.io/posts/leetcode-698-partition-to-k-equal-sum-subsets/</link><pubDate>Wed, 13 Jul 2022 18:17:01 +0000</pubDate><guid>https://yun-20459.github.io/posts/leetcode-698-partition-to-k-equal-sum-subsets/</guid><description>好像比較了解 bit manipulation 可以幹嘛了（？）
題目 link
做法 這題是 這題 的進化版（？），要分成 $k$ 堆，一樣可以用 bit + dp 做，然後這邊還有一個小技巧是直接用餘數，這樣就可以直接在最後判是不是等於 0，如果不用餘數的話可能就要寫個 if 或者用更複雜的方式去判現在這個 element 能不能被放進這個 subset
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public: bool canPartitionKSubsets(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) { int sum = 0; for (int num : nums) sum += num; if (sum % k) return false; int target = sum / k; int n = nums.</description></item><item><title>Leetcode 473. Matchsticks to Square</title><link>https://yun-20459.github.io/posts/leetcode-473-matchsticks-to-square/</link><pubDate>Tue, 12 Jul 2022 23:20:53 +0000</pubDate><guid>https://yun-20459.github.io/posts/leetcode-473-matchsticks-to-square/</guid><description>不會 dp 也不會 bit manipulation QAQ
題目 link
作法 dfs 一個最簡單的做法可以直接 recursion, code 如下
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public: bool chk(vector&amp;lt;int&amp;gt;&amp;amp; side, vector&amp;lt;int&amp;gt;&amp;amp; matches, int id, int n) { if (id == n) { return side[0] == side[1] and side[1] == side[2] and side[2] == side[3]; } for (int i = 0; i &amp;lt; 4; i++) { side[i] += matches[id]; if (chk(side, matches, id + 1, n)) return true; side[i] -= matches[id]; } return false; } bool makesquare(vector&amp;lt;int&amp;gt;&amp;amp; matches) { int n = match.</description></item><item><title>frontend 學習筆記 - organizing js</title><link>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-organizing-js/</link><pubDate>Tue, 12 Jul 2022 13:23:03 +0000</pubDate><guid>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-organizing-js/</guid><description>creating object 定義物件的時候用 object literal syntax 較好，這個的意思是把 property 跟 value 用類似 array 的方式來寫，例如說
1 2 3 4 5 6 7 const myObject = { property: &amp;#39;Value!&amp;#39;, otherProperty: 77, &amp;#34;obnoxious property&amp;#34;: function() { // do stuff! } } 可以用 dot notation 或者 bracket notation 拿資料
1 2 3 4 5 // dot notation myObject.property // &amp;#39;Value!&amp;#39; // bracket notation myObject[&amp;#34;obnoxious property&amp;#34;] // [Function] function 定義在 prototype 比較好，不然每 new 一個 object 出來就會複製一次</description></item><item><title>frontend 學習筆記 - grid</title><link>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-grid/</link><pubDate>Sun, 10 Jul 2022 15:03:48 +0000</pubDate><guid>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-grid/</guid><description>grid 是什麼 一種 display 的方法，可以 display grid （廢話）
常用 property &amp;amp; function grid-template-columns、grid-template-rows: 設定有幾行/列，並給訂每一行/列的寬度 給的時候可以用 repeat(次數, 寬度) 來給，其中寬度的單位可以是 px 或 fr (fraction unit) grid-auto-rows、grid-auto-columns: 設定 template 以外的行/列 grid-auto-flow: 指定多出來的 grid 要往哪裡長 gap: 可以同時設定 row-gap、column-gap resize: both: 可以讓 user 調整 grid container 的大小 overflow: auto: 如果 container 變太小就可以自動調整成滾動式內容 minmax(): 只能用在 grid-template-columns、grid-template-rows、grid-auto-rows、grid-auto-columns，給 container shrink and grow 最小和最大值 auto-fit、auto-fill: 會自動依據 container 的大小調整個數，兩個的差別在如果 grid 大到可以容納其他 item 但沒有其他 item 的時候， auto-fit 會用 max， auto-fill 會用 min auto-fit 例子 auto-fill 例子 positioning grid-column-start、grid-column-end、grid-row-start、grid-row-end: 可以固定透過 line 固定 grid cell 的位置 可以直接用 grid-area 來表示 grid-row-start / grid-column-start / grid-row-end / grid-column-end grid-area 也可以直接給 value，然後再用 grid-template-area 排，空的地方就用 .</description></item><item><title>Leetcode 1696. Jump Game VI</title><link>https://yun-20459.github.io/posts/leetcode-1696-jump-game-vi/</link><pubDate>Sun, 10 Jul 2022 00:19:10 +0000</pubDate><guid>https://yun-20459.github.io/posts/leetcode-1696-jump-game-vi/</guid><description>題目 link
作法 令 dp[i] 為以 $i$ 為起點到終點能獲得的最大分數。如果枚舉可以走的範圍內最大的話複雜度會是 $O(nk)$ 會 TLE，所以可以用 deque 或是 priority_queue 來優化，維護一個可以走的範圍內的單調隊列或者 heap，就可以在 $O(1)$ 或是 $O(logk)$ 內拿到最大值了。
下面兩種 code 分別用 deque 和 priority_queue 寫， deque 版本是從起點開始做，priority_queue 版本是從終點開始做
deque 版本
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public: int maxResult(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) { int n = nums.size(); vector&amp;lt;int&amp;gt; dp(n, 0); deque&amp;lt;int&amp;gt; dq; dp[0] = nums[0]; dq.</description></item><item><title>frontend 學習筆記 - form</title><link>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-form/</link><pubDate>Fri, 08 Jul 2022 14:08:29 +0000</pubDate><guid>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-form/</guid><description>建立 form 範例 code
&amp;lt;form&amp;gt; action: 後面要放的是 url，代筆要送資料去處理的地方 method: 送這個 form 的 http request method &amp;lt;input&amp;gt; type: 輸入的形式，可以是 radio: 圓圓的選擇按鍵 checked: 預設選起來的選項 checkbox: 可以打勾的清單符號 checked: 預設選起來的選項 text: 文字 number: 數字 email: 就是 email password: 會自動把使用者輸入用 * 遮掉 date: 日期 url: 網址 placeholder: 在輸入框內提示你的輸入應該會長怎樣 name: 資料放在 form control 後的 reference required: 必須填寫 title: 可以提供 validation msg &amp;lt;label&amp;gt; for: 這個屬性要跟搭配的 &amp;lt;input&amp;gt; 的 id 一樣 &amp;lt;textarea&amp;gt;: 給使用者寫文字的地方，可以調整長寬也可以預先輸入文字 &amp;lt;select&amp;gt;: 選單 &amp;lt;option&amp;gt;: 就是選單裡面的選項 value: 會傳到 server 的值 selected: 預設選起來的選項 &amp;lt;optgroup&amp;gt;: 選單裡面的大類別 label: 顯示給使用者看的大類別 &amp;lt;button&amp;gt; type submit: 預設值，會送出 form reset: 重設 form button: 最 general 的一種 &amp;lt;fieldset&amp;gt;: 可以把相關的 form 弄在一起 &amp;lt;legend&amp;gt;: fieldset 中顯示給使用者看這個 fieldset 的主題 form 驗證 text validation minlength maxlength pattern: 吃 regex 來判斷 (regex 另一份教學) number validation min max styling 可以用 :valid 跟 :invalid 這兩個 pseudo class 來做</description></item><item><title>Leetcode 32. Longest Valid Parentheses</title><link>https://yun-20459.github.io/posts/leetcode-32-longest-valid-parentheses/</link><pubDate>Thu, 07 Jul 2022 21:17:42 +0000</pubDate><guid>https://yun-20459.github.io/posts/leetcode-32-longest-valid-parentheses/</guid><description>我真的不會 dp QwQ
題目 link
作法 可以先從基礎題開始想，就是判合法括號字串，這個用 stack 就可以解決（其實這題也可，但我想練 dp），從這個的想法出發的話，可以先想到
如果前一個是 ( 後一個是 )，那就有一個長度為 2 的合法括號字串 如果以 dp[i] 來記錄以 $i 為結尾最長合法括號字串長度的話， 1. 可以寫成 dp[i] = dp[i - 1] + 2，要注意這個是建立在你已經知道前面有 ( 了。
接下來再考慮這個 case ()()，因為 dp[i] 要記錄的是以 $i$ 為結尾最長合法括號字串長度，所以前面合法括號字串長度也要算進來，這個的算法可以利用現在紀錄的長度跟 index 來算。
以這個 case 來說，它其實可以切成兩個 ()，在算第二個的時候按照上面的式子只會記錄到長度 2，，所以要去看 i - dp[i] 這個 index dp 值存的是多少然後加起來。
就有
if (i - dp[i] &amp;gt; 0) dp[i] += dp[i - dp[i]] 最後就是看整個字串然後一邊用 dp 值更新答案
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public: int longestValidParentheses(string s) { int n = s.</description></item><item><title>frontend 學習筆記 - more on css</title><link>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-more-on-css/</link><pubDate>Tue, 05 Jul 2022 19:22:15 +0000</pubDate><guid>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-more-on-css/</guid><description>Browser default style 每個瀏覽器會有自己的 default style，所以網路上有開源的 .css 讓開發者們用，可以 undo browser default style 然後根據自己的規則在不同的瀏覽器上顯示一樣的東西
常用的有
Meyer Reset Normalize CSS 這邊 可以看到瀏覽器的 default style
Absolute/Relative Unit Absolute
像是 px 這種直接給定幾個 pixel 的
Relative
em/rem em: 看元素的 font-size，如果元素的 font-size 是 10px，那 2em = 10px * 2 = 20px rem(recommended): 看 :root 或 html 的 font-size viewport Unit vh: 1vh = 1% viewport height vw: 1vw = 1% viewport width viewport unit 可以做的事 font online font library Google Fonts、Font library</description></item><item><title>frontend 學習筆記</title><link>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</link><pubDate>Fri, 01 Jul 2022 16:50:25 +0000</pubDate><guid>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</guid><description>html tag 們可以參考 這裡 table tag 簡單來說就是可以生成表格的 tag
&amp;lt;tr&amp;gt;: table row，包在這個裡面的會形成一個 row &amp;lt;td&amp;gt;: table data，就是放格子中要填的 data &amp;lt;th&amp;gt;: table header，就是在 table 中的 header &amp;lt;colgroup&amp;gt;、&amp;lt;col&amp;gt;: 前者是拿來放後者的，放幾個就產生幾個 column 例子，他的 live demo
&amp;lt;caption&amp;gt;: 字面上意思，會出現在表格上面，可以簡短說明表格內容的文字 &amp;lt;thead&amp;gt;、&amp;lt;tfoot&amp;gt;、&amp;lt;tbody&amp;gt;: 讓整個 table 結構化 例子，他的 live demo
id、header: 可以在 table header 上面加上 id，然後在他的子表格（？）透過這些 id 標明他的 header 有誰 例子，他的 live demo
css css cheat sheet emmet 應該算是一種輔助寫 html 的強大 plugin
emmet cheet sheet
Wrap with Abbreviation 在 vscode 裡的用法是
選起來要被包住的內容 先 Ctrl + Shift + P 叫出 command palette 輸入 Emmet: Wrap with Abbreviation 然後就可以打指令了 （或者也可以 command+k command+s 打開 keyboard shortcut 設定，如果懶得設定，可以直接去 extension 下載 emmet keybindings 用）</description></item><item><title>frontend 學習筆記 - js</title><link>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-js/</link><pubDate>Sun, 26 Jun 2022 15:05:15 +0000</pubDate><guid>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-js/</guid><description>寫在網頁裡的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script&amp;gt; // Your JavaScript goes here! console.log(&amp;#34;Hello, World!&amp;#34;) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 或者
1 &amp;lt;script src=&amp;#34;javascript.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; Variable 宣告 let 是一般變數，const是常數變數
用駝峰式命名法（const 的話全部大寫）
- 不應該出現在命名中，無意義的變數可以用 $ 或者 _
不要把變數都宣告在同一行
可以用科學記號賦值
integer 精度只到 15 位數
1 2 let x = 999999999999999; // x will be 999999999999999 let y = 9999999999999999; // y will be 10000000000000000 string method Extract string part slice: 區間是左閉右開</description></item><item><title>frontend 學習筆記 - flexbox</title><link>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-flexbox/</link><pubDate>Sat, 25 Jun 2022 13:10:13 +0000</pubDate><guid>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-flexbox/</guid><description>flexbox 是什麼 應該是個切版好工具？大概的功能是讓 element 可以併排，而不是 stacking 或者 centering。 例子可以看 這裡
分類 flex container flex item 外容器 在 flex container 中的 item display, flex-flow(direction &amp;amp; wrap), justify-content, align-items flex, order, align-self flex item 也可以同時作為 flex container！ flex container display 可以用 display: flex; 或 display: inline-flex;，後者是類似 inline-block + flex。
flex-flow axes
設定 main axis 跟 cross axis，這兩個東西是相對的。 ex. flex-direction: row 就是讓 main axis 是水平的，也就是說會讓 item 水平排列。
default 是 row，如果變成 column 的話，flex-basis 會看 height 而不是 width。</description></item><item><title>Leetcode 1354. Construct Target Array With Multiple Sums</title><link>https://yun-20459.github.io/posts/leetcode-1354-construct-target-array-with-multiple-sums/</link><pubDate>Fri, 24 Jun 2022 20:55:17 +0000</pubDate><guid>https://yun-20459.github.io/posts/leetcode-1354-construct-target-array-with-multiple-sums/</guid><description>題目 link
作法 我是看 hint 才會的 QQ，hint 就是這題其實要反著做，就是說如果 target array 是可以被構造出來的話，逆推回去就應該是對的。
作法是把最大值一個一個從 priority_queue 中拔出來處理，有三種情況應該要 return false
val &amp;lt;= sum
可以假設被修改前值是 $x$，剩下的值總和是 $y$，所以修改後的值是 $x+y$。 從 code 裡可以看到現在 $sum = y$，所以理論上是不會大於 $x + y$ 的。
sum &amp;lt; 1
根據 1. 可以發現既然 $sum = y$，那因為要構造的陣列值都是 1 ，所以如果小於 1 就是錯的。
sum != 1 and val == 0
這邊牽扯到我上面的一點實作方式，因為同一個值可能被操作很多次，所以可以直接 %=sum 找到操作前的值，再把它加上 $sum$ 就是修改前的陣列總和。那這邊需要特判[1, 1]這個 case，因為雖然理論上val == 0會是錯的（因為這代表修改前的值是 0 &amp;lt; 1），但是可以發現這個 case 在這裡會是錯的，所以需要特判掉。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public: bool isPossible(vector&amp;lt;int&amp;gt;&amp;amp; target) { priority_queue&amp;lt;int&amp;gt; pq; unsigned int sum = 0; for (int num : target) { pq.</description></item><item><title>frontend 學習筆記 - css</title><link>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-css/</link><pubDate>Fri, 24 Jun 2022 13:10:30 +0000</pubDate><guid>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-css/</guid><description>基礎架構 1 2 3 &amp;lt;selector&amp;gt; { &amp;lt;property&amp;gt;: &amp;lt;value&amp;gt;; } selector universal selector
1 2 3 * { color: purple; } type selector
1 2 3 div { color: white; } class selector
1 2 3 &amp;lt;div class=&amp;#34;alert-text severe-alert&amp;#34;&amp;gt; Please agree to our terms of service. &amp;lt;/div&amp;gt; 1 2 3 .alert-text { color: red; } id selector
1 &amp;lt;div id=&amp;#34;title&amp;#34;&amp;gt;My Awesome 90&amp;#39;s Page&amp;lt;/div&amp;gt; 1 2 3 #title { background-color: red; } difference between class &amp;amp; ID The major difference between classes and IDs is that an element can only have one ID.</description></item><item><title>frontend 學習筆記 - html</title><link>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-html/</link><pubDate>Tue, 21 Jun 2022 21:26:41 +0000</pubDate><guid>https://yun-20459.github.io/posts/frontend-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-html/</guid><description>學習網站 link
html &amp;lt;title&amp;gt; &amp;lt;/title&amp;gt; : 網頁標題
&amp;lt;p&amp;gt; &amp;lt;/p&amp;gt;: 網站內容中的文章 tag
&amp;lt;h1&amp;gt; &amp;lt;/h1&amp;gt;: 標題字，有 h1~h6
&amp;lt;strong&amp;gt; &amp;lt;/strong&amp;gt;: 粗體
&amp;lt;em&amp;gt; &amp;lt;/em&amp;gt;: 斜體
&amp;lt;!-- comment --&amp;gt;
list
unordered list
1 2 3 4 5 &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;Item 1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Item 2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Item 3&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; ordered list
1 2 3 4 5 &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt;Item 1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Item 2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;Item 3&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;a href=&amp;quot;url&amp;quot;&amp;gt; &amp;lt;/a&amp;gt;: 超連結
url 可以是絕對連結（ex. 外部）or 相對連結（ex. 內部連結）
1 2 3 4 5 6 &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Homepage&amp;lt;/h1&amp;gt; &amp;lt;a href=&amp;#34;https://www.</description></item><item><title>verilog 學習筆記</title><link>https://yun-20459.github.io/posts/verilog-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</link><pubDate>Sat, 18 Jun 2022 14:08:36 +0000</pubDate><guid>https://yun-20459.github.io/posts/verilog-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</guid><description>基礎語法 module
1 2 3 module &amp;lt;module name&amp;gt;(&amp;lt;parameters&amp;gt;); // module content endmodule assign
1 assign out = in; gate
and &amp;amp; or | not ~ xor ^ wire
1 wire w1, w2, w3; 多進制表示
&amp;lt;位元長度&amp;gt; ’ &amp;lt;進制表示&amp;gt; &amp;lt;數值資料&amp;gt;
vector
1 2 3 4 5 // type [upper:lower] vector_name; output reg [0:0] y; // 1-bit reg that is also an output port (this is still a vector) input wire [3:-2] z; // 6-bit wire input (negative ranges are allowed) output [3:0] a; // 4-bit output wire.</description></item><item><title>Google Android Study Jam 學習筆記(6)</title><link>https://yun-20459.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-6/</link><pubDate>Fri, 17 Jun 2022 00:16:03 +0000</pubDate><guid>https://yun-20459.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-6/</guid><description>學習範圍 單元 5、單元 6、Jetpack
SQL 語法 statement
1 2 3 SELECT name FROM park WHERE type != &amp;#34;recreation_area&amp;#34; AND area_acres &amp;gt; 100000 function
1 2 3 4 SELECT COUNT(*) FROM park SELECT SUM(park_visitors) FROM park SELECT MAX(area_acres) FROM park SELECT COUNT(DISTINCT type) FROM park ordering &amp;amp; grouping
1 2 3 4 5 6 7 /* sort by descending order*/ SELECT name FROM park ORDER BY name DESC /* see how many parks of each type are present, and get a separate count for each.</description></item><item><title>Google Android Study Jam 學習筆記(5)</title><link>https://yun-20459.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-5/</link><pubDate>Wed, 15 Jun 2022 19:56:39 +0000</pubDate><guid>https://yun-20459.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-5/</guid><description>學習範圍 單元 4
Kotlin 語法 thread
runBlocking{}、.async() lazy instantiation
@Json Annotation
let
將最後一行帶到下一個 chain 或是回傳 Scope Function Android Studio debugger</description></item><item><title>Google Android Study Jam 學習筆記(4)</title><link>https://yun-20459.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-4/</link><pubDate>Tue, 14 Jun 2022 18:37:11 +0000</pubDate><guid>https://yun-20459.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-4/</guid><description>學習範圍 單元 3 課程 2~5
Android Studio fragment
一種可以重複利用的 UI -
Navigation
NavHostFragment: container for destinations NavController: conducts navigation NavigationView: menu of drawerlayout NavigationUI: update content outside NavHostFragment Navgraph
app 中導覽的對應 ex. 從 Home -&amp;gt; Setting 結構準則
separation of concerns driving UI from a model main classes / components in Android architecture: UI Controller (activity/fragment), ViewModel, LiveData and Room SlidingPaneLayout</description></item><item><title>Google Android Study Jam 學習筆記(3)</title><link>https://yun-20459.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-3/</link><pubDate>Mon, 13 Jun 2022 21:57:59 +0000</pubDate><guid>https://yun-20459.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-3/</guid><description>學習範圍 單元 3 課程 1
Kotlin 語法 Set
1 2 3 val tmp = &amp;lt;list&amp;gt;.toSet() val set1 = setOf(1,2,3) val set2 = mutableSetOf(3,2,1) 可以用 contains()、intersect()、union()
Map
1 2 3 4 5 6 7 8 9 10 11 12 fun main() { val peopleAges = mutableMapOf&amp;lt;String, Int&amp;gt;( &amp;#34;Fred&amp;#34; to 30, &amp;#34;Ann&amp;#34; to 23 ) peopleAges.put(&amp;#34;Barbara&amp;#34;, 42) peopleAges[&amp;#34;Joe&amp;#34;] = 51 val filteredNames = peopleAges.filter { it.key.length &amp;lt; 4 } println(peopleAges.map { &amp;#34;${it.key} is ${it.</description></item><item><title>Google Android Study Jam 學習筆記(2)</title><link>https://yun-20459.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-2/</link><pubDate>Sat, 11 Jun 2022 12:30:51 +0000</pubDate><guid>https://yun-20459.github.io/posts/google-android-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-2/</guid><description>學習範圍 單元 2 課程 3
Kotlin 語法 list
list
宣告 1 val numbers: List&amp;lt;Int&amp;gt; = listOf(1, 2, 3, 4, 5, 6) 其他 1 2 3 4 5 6 7 8 9 println(&amp;#34;List: $numbers&amp;#34;) // = println(&amp;#34;List: &amp;#34; + numbers) println(&amp;#34;Size: ${numbers.size}&amp;#34;) println(&amp;#34;First element: ${numbers[0]}&amp;#34;) println(&amp;#34;First: ${numbers.first()}&amp;#34;) println(&amp;#34;Last: ${numbers.last()}&amp;#34;) println(&amp;#34;Contains 4? ${numbers.contains(4)}&amp;#34;) // true println(&amp;#34;Contains 7? ${numbers.contains(7)}&amp;#34;) // false println(&amp;#34;Reversed list: ${colors.reversed()}&amp;#34;) println(&amp;#34;Sorted list: ${colors.sorted()}&amp;#34;) mutablelist
宣告 1 val entrees = mutableListOf&amp;lt;String&amp;gt;() // val entrees: MutableList&amp;lt;String&amp;gt; = mutableListOf() 其他 1 2 3 4 5 6 7 println(&amp;#34;Add noodles: ${entrees.</description></item><item><title>Google Andriod Study Jam 學習筆記(1)</title><link>https://yun-20459.github.io/posts/google-andriod-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-1/</link><pubDate>Fri, 10 Jun 2022 21:10:46 +0000</pubDate><guid>https://yun-20459.github.io/posts/google-andriod-study-jam-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-1/</guid><description>學習範圍 單元 1 ~ 單元 2 課程 2
Kotlin 語法 函式
1 2 3 fun &amp;lt;function name&amp;gt; : &amp;lt;return type&amp;gt; { } 輸出
1 2 println(&amp;#34;Hi&amp;#34;) // 有換行 print(&amp;#34;Hi&amp;#34;) // 沒換行 宣告變數
1 2 val &amp;lt;variable name&amp;gt; = &amp;lt;variable value&amp;gt; val &amp;lt;variable name&amp;gt; = &amp;lt;class name&amp;gt;(parameter) 迴圈
1 2 3 repeat (&amp;lt;times&amp;gt;) { } class
1 2 3 4 5 6 class &amp;lt;class name&amp;gt; (val &amp;lt;variable name&amp;gt;: &amp;lt;variable type&amp;gt;, ...) { val &amp;lt;variable name&amp;gt; = &amp;lt;variable type&amp;gt; fun &amp;lt;function name&amp;gt; { } } inherit</description></item><item><title>110-2 修課心得</title><link>https://yun-20459.github.io/posts/110-2-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</link><pubDate>Tue, 07 Jun 2022 16:34:38 +0000</pubDate><guid>https://yun-20459.github.io/posts/110-2-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</guid><description>修的課程 資訊系必修：作業系統、資料結構與演算法
資訊系選修：多媒體安全、離散數學
通識：醫學與生活
已經爆掉的一般選修：機器學習
作業系統 開課教授：施吉昇、林忠緯
涼度：-$\infty$/5
甜度：3/5 （作業好好做沒意外應該可以保底 A- 之類的）
又硬又硬的必修系統課 QQ，code 跟作業 pdf 在這裡。
有人說林上的比較好不過因為我是施班就乾脆聽施的（兩個老師的都可以聽），老師講得很不錯，就算我停修 sp 也是能夠大致聽懂，而且在影片下留言問問題老師也回蠻快的，小缺點就是音質不是很好，身為耳機黨的我常常直接去世（Ｘ，然後老師給的是 .pdf 不是 .key 所以有些精美的動畫會沒辦法抄筆記QQ
來分享（？）一下我 mp2 發生的蠢事，一開始因為一個 level 忘記 +1 就整個格式爆掉直接 0 分&amp;hellip; 但助教很好心的讓我 regrade，結果 regrade 完 6 分 ==? 結果是我在根本不用輸出東西的地方輸出氣死，還忘記上一個 flag，70 分就這樣說掰掰 QQ，提醒有看到這裡的人記得用 diff 檢查作業，不要跟我一樣因為助教輸出格式很機車就偷懶 QQ 而且這門課作業成績很重，真的不要跟我一樣智障：）
資料結構與演算法 開課教授：林軒田、蔡欣穆
涼度：3/5
甜度：2/5 (2 顆星是給快不及格的人的，請見下面鬼切·等第線)
aka DSA，code 跟 pdf 一樣在這裡。
這門課我只有後半學期有在上課（Ｘ）因為欣穆老師會直播互動，所以要跟課回答題目，然後會有大地遊戲，蠻好玩的。軒田老師是直播課會有錄影，欣穆老師是翻轉課堂然後會有 with-video quiz 要做，都是上課教過的東西所以不會太難。
就是跟 ADA 一樣難的是作業不是上課的課（Ｏ），難的點應該是只能用 C 寫不能用 C++ 的 STL 所以要手刻一些資料結構很痛苦 QQ，至於算法的部分 hw3 hw4 都分別有一題難題，我都是被老師們教會的 &amp;gt;&amp;lt; 不過 DSA 出現 treap + 吉如一 是不是搞錯了什麼 QQ (btw 我 hw4 p3 根本毒瘤，可以離線做結果我在線用持久化並查集www)</description></item><item><title>CSES Round Trip</title><link>https://yun-20459.github.io/posts/cses-round-trip/</link><pubDate>Sun, 27 Feb 2022 22:41:56 +0000</pubDate><guid>https://yun-20459.github.io/posts/cses-round-trip/</guid><description>我一直以為我會找環欸，結果其實是我會找但要印出來就不會，我就笨 :p
題目 link
找圖中隨便一個環然後印路徑，如果沒有就輸出 IMPOSSIBLE。
作法 就是 dfs 一下(?)，最近在試著改掉開全域的壞習慣 :p，主要是我想要怎麼記祖先想很久，覺得開 parent 陣列又太肥，後來想到當參數傳下去不就好了嗎，笨笨的 :p
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 #include &amp;lt;bits/stdc++.</description></item><item><title>Leetcode 96. Unique Binary Search Trees</title><link>https://yun-20459.github.io/posts/leetcode-96-unique-binary-search-trees/</link><pubDate>Sat, 12 Feb 2022 19:13:27 +0000</pubDate><guid>https://yun-20459.github.io/posts/leetcode-96-unique-binary-search-trees/</guid><description>忘記數學了所以來複習一下 :p
題目 link
作法 如果假設有 $n$ 個節點的二元樹有 $G_n$ 個，其中以 $i$ 節點為根的數目有 $F_i$ 個，那麼
$$ G_n = F_1 + F_2 + &amp;hellip; + F_n$$
根據二元樹的定義，根節點一定大於左節點小於右節點，所以以 $i$ 節點為根的二元樹可以看成是 由 $1$ 到 $i - 1$ 構成的左子樹 加上 由 $i + 1$ 到 $n$ 構成的右子樹，也就是說
$$F_i = G_{i - 1} * G_{n - i}$$
所以遞迴式就跑出來了
$$G_n = G_0 * G_{n - 1} + G_1 * G_{n - 2} + &amp;hellip; + G_{n - 1} * G_0$$</description></item><item><title>Leetcode 45. Jump Game II</title><link>https://yun-20459.github.io/posts/leetcode-45-jump-game-ii/</link><pubDate>Fri, 04 Feb 2022 17:26:23 +0000</pubDate><guid>https://yun-20459.github.io/posts/leetcode-45-jump-game-ii/</guid><description>寒假因為很無聊就來刷題，絕對不是因為我很廢 :p
題目 link
作法 我是先想到 $O(n^2)$ 的做法，對於每個位置 $i$ 都去看前面的位置 $j$ 能不能走得更遠，如果可以的話就把 $i$ 的最小步數更新成走到 $j$ 的步數 +1（從 $j$ 到 $i$）
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public: int jump(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int n = nums.size(); vector&amp;lt;int&amp;gt; dp(n, INT_MAX); dp[0] = 0; for (int i = 1; i &amp;lt; n; i++) { for (int j = 0; j &amp;lt; i; j++) { if (j + nums[j] &amp;gt;= i and dp[j] !</description></item><item><title>110-1 修課心得</title><link>https://yun-20459.github.io/posts/110-1-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</link><pubDate>Wed, 26 Jan 2022 21:23:04 +0000</pubDate><guid>https://yun-20459.github.io/posts/110-1-%E4%BF%AE%E8%AA%B2%E5%BF%83%E5%BE%97/</guid><description>修的課程 資訊系必修：計算機程式設計、演算法設計與分析、線性代數
資訊系選修：計算機概論
通識：現代生物學之應用
學程必修：神經生物與認知科學專題討論一、普通心理學
計算機程式設計 開課教授：張傑帆
涼度：5/5
甜度：5/5
以前都只有 P 教授的課，今年突然多了一班僅限大二以上修習 aka 學長姐重修班，選不到 P 教授的課我就很理所當然地跑去當了真強者，不過這邊真強者的程度應該是沒辦法跟 P 教授那邊比，我這種雜魚都能當= =
當真強者雖然不用考試但一個學期要出六題題目，還蠻累但蠻有趣的，可以練習用py生測資，不過小傷心的是我有一題原本被選當期中考，但考前一小時突然被拔掉了 QAQ，不過沒選我的可能比較好，我後來被選到一題小考班平均只有 14 分我快嚇死以為測資有錯，還好沒有。
因為當真強者可以直接 A+，所以我不知道是怎麼配分的，學期中好像也調過一兩次，所以就不附了。
演算法設計與分析 開課教授：陳縕儂、蕭旭君
涼度：0/5
甜度：4/5 (今年 84 分以上 A+，殘念 QQ）
aka ADA，目前修過最硬的課沒有之一，第一次作業出來我就覺得我完蛋了，我這學期基本上沒有一天是不碰 ADA 的 QQ，要嘛在研究手寫要嘛在想程式，不過後來遇到了很多熱心的老師，所以後面作業就都快樂的滿分了～
Vivian 跟旭君的課我覺得都適合直播完放 2 倍速聽，Vivian 的有時可以 4 倍速（Ｘ Vivian 的會容易想睡覺，但是老師講的真的很清楚，旭君的語調比較不容易睡著，也是一樣講得很清楚
這學期最值得誇讚的應該是 TAs，除了少數 TA 真的超雷，多數 TA 都超級有耐心和專業，我覺得修這堂課大概就是三種人，一種是狂跑 TA hour，一種是找好大腿（後半學期的我），一種是我就爛（前半學期的我）。尤其這大概是我第一堂正式練習數學證明的課，第一份作業用 latex 沒有很適應，後來就覺得沒有 latex 不行，很多想講清楚的東西還是用 latex 可以畫得更清楚，當然也有強者用 markdown，我真的不行&amp;hellip;
作業跟考試題目答案有的都放在 這裡，雖然我開 public 但還是請各位不要隨便張揚&amp;gt;&amp;lt;
線性代數 開課教授：陳文進
涼度：4/5</description></item><item><title>About</title><link>https://yun-20459.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yun-20459.github.io/about/</guid><description>general SWE @ Google TW
112CS b09
喜歡看設計、心理學、寫扣、嘗試不會的東西
Discord: 866534345651912715
程式相關經驗 CPE 7/7 全國第一
ICPC 靠隊友拿牌
沒有什麼大專案經驗，都是自己開發好玩的
發過一篇第 n 作的 paper</description></item><item><title>Search</title><link>https://yun-20459.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yun-20459.github.io/search/</guid><description>This is the search page, type keywords to search among my articles.</description></item></channel></rss>