<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Priority_queue on 隨寫日誌</title><link>https://yun-20459.github.io/tags/priority_queue/</link><description>Recent content in Priority_queue on 隨寫日誌</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>Erin Li</copyright><lastBuildDate>Sun, 10 Jul 2022 00:19:10 +0000</lastBuildDate><atom:link href="https://yun-20459.github.io/tags/priority_queue/index.xml" rel="self" type="application/rss+xml"/><item><title>Leetcode 1696. Jump Game VI</title><link>https://yun-20459.github.io/posts/leetcode-1696-jump-game-vi/</link><pubDate>Sun, 10 Jul 2022 00:19:10 +0000</pubDate><guid>https://yun-20459.github.io/posts/leetcode-1696-jump-game-vi/</guid><description>題目 link
作法 令 dp[i] 為以 $i$ 為起點到終點能獲得的最大分數。如果枚舉可以走的範圍內最大的話複雜度會是 $O(nk)$ 會 TLE，所以可以用 deque 或是 priority_queue 來優化，維護一個可以走的範圍內的單調隊列或者 heap，就可以在 $O(1)$ 或是 $O(logk)$ 內拿到最大值了。
下面兩種 code 分別用 deque 和 priority_queue 寫， deque 版本是從起點開始做，priority_queue 版本是從終點開始做
deque 版本
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public: int maxResult(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) { int n = nums.size(); vector&amp;lt;int&amp;gt; dp(n, 0); deque&amp;lt;int&amp;gt; dq; dp[0] = nums[0]; dq.</description></item><item><title>Leetcode 1354. Construct Target Array With Multiple Sums</title><link>https://yun-20459.github.io/posts/leetcode-1354-construct-target-array-with-multiple-sums/</link><pubDate>Fri, 24 Jun 2022 20:55:17 +0000</pubDate><guid>https://yun-20459.github.io/posts/leetcode-1354-construct-target-array-with-multiple-sums/</guid><description>題目 link
作法 我是看 hint 才會的 QQ，hint 就是這題其實要反著做，就是說如果 target array 是可以被構造出來的話，逆推回去就應該是對的。
作法是把最大值一個一個從 priority_queue 中拔出來處理，有三種情況應該要 return false
val &amp;lt;= sum
可以假設被修改前值是 $x$，剩下的值總和是 $y$，所以修改後的值是 $x+y$。 從 code 裡可以看到現在 $sum = y$，所以理論上是不會大於 $x + y$ 的。
sum &amp;lt; 1
根據 1. 可以發現既然 $sum = y$，那因為要構造的陣列值都是 1 ，所以如果小於 1 就是錯的。
sum != 1 and val == 0
這邊牽扯到我上面的一點實作方式，因為同一個值可能被操作很多次，所以可以直接 %=sum 找到操作前的值，再把它加上 $sum$ 就是修改前的陣列總和。那這邊需要特判[1, 1]這個 case，因為雖然理論上val == 0會是錯的（因為這代表修改前的值是 0 &amp;lt; 1），但是可以發現這個 case 在這裡會是錯的，所以需要特判掉。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public: bool isPossible(vector&amp;lt;int&amp;gt;&amp;amp; target) { priority_queue&amp;lt;int&amp;gt; pq; unsigned int sum = 0; for (int num : target) { pq.</description></item></channel></rss>